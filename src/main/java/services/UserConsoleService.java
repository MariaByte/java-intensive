package services;

import dao.UserDao;
import dao.UserDaoImpl;
import models.User;
import java.util.List;
import java.util.Scanner;

public class UserConsoleService {

    private final UserDao userDao = new UserDaoImpl();
    private final Scanner scanner = new Scanner(System.in);

    public void start() {
        boolean running = true;
        while (running) {
            printMenu();

            System.out.print("–ü—É–Ω–∫—Ç: ");

            String input = scanner.nextLine().trim();
            if (input.isEmpty()) continue;

            try {
                int choice = Integer.parseInt(input);
                switch (choice) {
                    case 1 -> createUser();
                    case 2 -> listUsers();
                    case 3 -> getUserById();
                    case 4 -> updateUser();
                    case 5 -> deleteUser();
                    case 0 -> running = false;
                    default -> System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                }
            } catch (NumberFormatException e) {
                System.out.println("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
            }
        }
        System.out.println("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!");
    }

    private void printMenu() {
        System.out.println("\n================= –ú–ï–ù–Æ =================");
        System.out.println("1. –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        System.out.println("2. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
        System.out.println("3. –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID");
        System.out.println("4. –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        System.out.println("5. –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        System.out.println("0. –í—ã—Ö–æ–¥");
        System.out.println("========================================");
    }

    private void createUser() {
        System.out.println("\n=== –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===");
        String name = readNonEmptyString("–ò–º—è: ");
        String email = readNonEmptyString("Email: ");
        int age = readInt("–í–æ–∑—Ä–∞—Å—Ç: ");

        userDao.create(new User(name, email, age));
        System.out.println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω!");
    }

    private void listUsers() {
        List<User> users = userDao.getAll();
        if (users.isEmpty()) {
            System.out.println("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.");
            return;
        }

        System.out.println("\n================= –°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô =================");
        System.out.printf("%-5s | %-20s | %-25s | %-6s | %-20s%n",
                "ID", "–ò–º—è", "Email", "–í–æ–∑—Ä–∞—Å—Ç", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è");
        System.out.println("---------------------------------------------------------------");

        for (User user : users) {
            System.out.printf("%-5d | %-20s | %-25s | %-6d | %-20s%n",
                    user.getId(),
                    user.getName(),
                    user.getEmail(),
                    user.getAge(),
                    user.getCreatedAt() != null ? user.getCreatedAt().toString() : "-");
        }
        System.out.println("===============================================================");
    }

    private void getUserById() {
        int id = readInt("–í–≤–µ–¥–∏—Ç–µ ID: ");
        User user = userDao.getById(id);
        if (user != null) {
            System.out.println("\nüîé –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:");
            System.out.println(user);
        } else {
            System.out.println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }
    }

    private void updateUser() {
        int id = readInt("–í–≤–µ–¥–∏—Ç–µ ID: ");
        User user = userDao.getById(id);
        if (user == null) {
            System.out.println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }

        System.out.println("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ –Ω–∞–¥–æ –º–µ–Ω—è—Ç—å):");

        System.out.print("–ò–º—è (" + user.getName() + "): ");
        String newName = scanner.nextLine();
        if (!newName.isBlank()) user.setName(newName);

        System.out.print("Email (" + user.getEmail() + "): ");
        String newEmail = scanner.nextLine();
        if (!newEmail.isBlank()) user.setEmail(newEmail);

        System.out.print("–í–æ–∑—Ä–∞—Å—Ç (" + user.getAge() + "): ");
        String newAgeStr = scanner.nextLine();
        if (!newAgeStr.isBlank()) {
            try {
                user.setAge(Integer.parseInt(newAgeStr));
            } catch (NumberFormatException e) {
                System.out.println("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.");
            }
        }

        userDao.update(user);
        System.out.println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!");
    }

    private void deleteUser() {
        int id = readInt("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ");
        userDao.delete(id);
        System.out.println("üóëÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω.");
    }

    private int readInt(String prompt) {
        while (true) {
            System.out.print(prompt);
            String input = scanner.nextLine();
            try {
                return Integer.parseInt(input.trim());
            } catch (NumberFormatException e) {
                System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.");
            }
        }
    }

    private String readNonEmptyString(String prompt) {
        while (true) {
            System.out.print(prompt);
            String input = scanner.nextLine().trim();
            if (!input.isEmpty()) {
                return input;
            }
            System.out.println("–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        }
    }
}
